$column-count: 12 !default;
$column-selector: '.col' !default;
$offset-modifier: 'offset' !default;

$gutter-width: 1rem !default;
$outer-margin: 2rem !default;
$gutter-compensation: (($gutter-width / 2) * -1) !default;
$half-gutter-width: ($gutter-width / 2) !default;

$width-xs: 30 !default;
$width-sm: 48 !default;
$width-md: 62 !default;
$width-lg: 75 !default;

$viewport-xs: #{$width-xs}em !default;
$viewport-sm: #{$width-sm}em !default;
$viewport-md: #{$width-md}em !default;
$viewport-lg: #{$width-lg}em !default;

$container-sm: #{$width-sm}rem + $gutter-width !default;
$container-md: #{$width-md}rem + $gutter-width !default;
$container-lg: #{$width-lg}rem + $gutter-width !default;

$xs: 'xs' !default;
$sm: 'sm' !default;
$md: 'md' !default;
$lg: 'lg' !default;

$block-delimiter: '-' !default;
$element-delimiter: '-' !default;
$modifier-delimiter: '-' !default;

$defaultQuery: $viewport-xs !default;
$sizes: #{$xs}, #{$sm}, #{$md}, #{$lg} !default;
$queries: (#{$xs}:#{$viewport-xs}, #{$sm}:#{$viewport-sm}, #{$md}:#{$viewport-md}, #{$lg}:#{$viewport-lg}) !default;

$column-properties: 'flex-basis', 'max-width' !default;
$offset-properties: 'margin-left' !default;

@mixin autoWidth() {
  flex-grow: 1;
  flex-basis: 0;
  max-width: 100%;
}

@mixin percentWidth($property, $columns, $count) {
  #{$property}: ((100% / $columns) * $count);
}

@mixin percentOffset($property, $columns, $count) {
  $single-column-width: ((100% / $columns) * 1);
  #{$property}: $single-column-width * $count;
}

@mixin queries($key, $queries) {
  $query: map-get($queries, $key);
  @if ($query == $defaultQuery) {
    @content;
  } @else {
    @media screen and (min-width: #{$query}) {
      @content;
    }
  }
}

@mixin columns($selector: $column-selector, $properties: $column-properties, $columns: $column-count, $queries: $queries) {
  @each $size in $sizes {
    @include queries($size, $queries) {
      @for $i from 0 through $columns {
        @if ($i == 0) {
          #{$selector}#{$block-delimiter}#{$size} {
            @content;
            @include autoWidth();
          }
        } @else {
          #{$selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$i} {
            @content;
            @each $prop in $properties {
              @include percentWidth($prop, $columns, $i);
            }
          }
        }
      }
    }
  }
}

@mixin offsets($selector: $column-selector, $modifier-selector: $offset-modifier, $properties: $offset-properties, $columns: $column-count, $queries: $queries) {
  @each $size in $sizes {
    @for $i from 1 through $columns {
      #{$selector}#{$block-delimiter}#{$size}#{$modifier-delimiter}#{$modifier-selector}#{$modifier-delimiter}#{$i} {
        @include queries($size, $queries) {
          @content;
          @each $prop in $properties {
            @include percentOffset($prop, $columns, $i);
          }
        }
      }
    }
  }
}

@mixin breakpoints($selector, $queries: $queries) {
  @each $size in $sizes {
    #{$selector}#{$modifier-delimiter}#{$size} {
      @include queries($size, $queries) {
        @content;
      }
    }
  }
}

@mixin box-class-style($name-class: '.box') {
  #{$name-class} {
    box-sizing: border-box;
    position: relative;
    box-sizing: border-box;
    min-height: 1rem;
    margin-bottom: 0;
    background: #007fff;
    border: 1px solid #fff;
    border-radius: 2px;
    overflow: hidden;
    text-align: center;
    color: white;
    &#{$name-class}-row {
      margin-bottom: 1rem;
    }
    @include breakpoints($name-class) {
      &#{$name-class}-row {
        margin-bottom: 2rem;
      }
    };
  }
}

.container-fluid {
  box-sizing: border-box;
  margin-right: auto;
  margin-left: auto;
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

%column {
  box-sizing: border-box;
  flex-grow: 0;
  flex-shrink: 0;
  padding-right: $half-gutter-width;
  padding-left: $half-gutter-width;
}

.percent-column {
  @extend %column;
}

@include columns() {
  @extend .percent-column;
}

@include offsets() {
  @extend .percent-column;
}

@include breakpoints('.start') {
  justify-content: flex-start;
}

@include breakpoints('.center') {
  justify-content: center;
}

@include breakpoints('.end') {
  justify-content: flex-end;
}

@include breakpoints('.top') {
  align-items: flex-start;
}

@include breakpoints('.middle') {
  align-items: center;
}

@include breakpoints('.bottom') {
  align-items: flex-end;
}

@include breakpoints('.around') {
  justify-content: space-around;
}

@include breakpoints('.between') {
  justify-content: space-between;
}

@include breakpoints('.first') {
  order: -1;
}

@include breakpoints('.last') {
  order: 1;
}

@include breakpoints('.reverse') {
  flex-direction: row-reverse;
}

@include box-class-style('.box');